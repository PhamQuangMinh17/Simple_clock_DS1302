
Pham_Quang_Minh_simple_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010a  0080010a  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea9  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f0  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000730  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007db  00000000  00000000  00002b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000333e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	75 00       	.word	0x0075	; ????
  6a:	78 00       	.word	0x0078	; ????
  6c:	7b 00       	.word	0x007b	; ????
  6e:	7e 00       	.word	0x007e	; ????
  70:	81 00       	.word	0x0081	; ????
  72:	84 00       	.word	0x0084	; ????
  74:	87 00       	.word	0x0087	; ????
  76:	8a 00       	.word	0x008a	; ????
  78:	8d 00       	.word	0x008d	; ????
  7a:	8f 00       	.word	0x008f	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e3       	ldi	r30, 0x30	; 48
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 31       	cpi	r26, 0x19	; 25
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  b2:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <SYSTEM_CONFIGURATION>:
   *  B0~B2: DS1301 communication. 
   *  B3,B4, B5: input. button 2, button 3 and button 4
   *  C0~C3: output. control digit 1~4 of the clock.
   *  C4,C5: output. LED 1 and LED 2. 
   */
  DDRD |= (127 <<0);  // 7 segments of LED. 
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	8f 67       	ori	r24, 0x7F	; 127
  be:	8a b9       	out	0x0a, r24	; 10
  DDRD &=~ (1<<7);// button 1
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	8a b9       	out	0x0a, r24	; 10
  DDRB &= ~(7<<3); // button 2,3,4. 
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	87 7c       	andi	r24, 0xC7	; 199
  ca:	84 b9       	out	0x04, r24	; 4
  DDRC |= (15<<0); // Digit 1 ~digit 4 of LED. 
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8f 60       	ori	r24, 0x0F	; 15
  d0:	87 b9       	out	0x07, r24	; 7
  DDRC |= (3<<4); // LED1, LED2 
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	80 63       	ori	r24, 0x30	; 48
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	08 95       	ret

000000da <SEGMENT_PATTERN>:
}
void SEGMENT_PATTERN(int number)
{
	switch(number)
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	91 05       	cpc	r25, r1
  de:	08 f5       	brcc	.+66     	; 0x122 <SEGMENT_PATTERN+0x48>
  e0:	fc 01       	movw	r30, r24
  e2:	ec 5c       	subi	r30, 0xCC	; 204
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__tablejump2__>
	{
		case 0:
		PORTD = 0b01000000;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	8b b9       	out	0x0b, r24	; 11
		break;
  ee:	08 95       	ret
		case 1:
		PORTD = 0b01111001;
  f0:	89 e7       	ldi	r24, 0x79	; 121
  f2:	8b b9       	out	0x0b, r24	; 11
		break;
  f4:	08 95       	ret
		case 2:
		PORTD = 0b00100100;
  f6:	84 e2       	ldi	r24, 0x24	; 36
  f8:	8b b9       	out	0x0b, r24	; 11
		break;
  fa:	08 95       	ret
		case 3:
		PORTD = 0b00110000;
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	8b b9       	out	0x0b, r24	; 11
		break;
 100:	08 95       	ret
		case 4:
		PORTD = 0b00011001 ;
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	8b b9       	out	0x0b, r24	; 11
		break;
 106:	08 95       	ret
		case 5:
		PORTD = 0b00010010;
 108:	82 e1       	ldi	r24, 0x12	; 18
 10a:	8b b9       	out	0x0b, r24	; 11
		break;
 10c:	08 95       	ret
		case 6:
		PORTD = 0b00000010;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	8b b9       	out	0x0b, r24	; 11
		break;
 112:	08 95       	ret
		case 7:
		PORTD = 0b01111000;
 114:	88 e7       	ldi	r24, 0x78	; 120
 116:	8b b9       	out	0x0b, r24	; 11
		break;
 118:	08 95       	ret
		case 8:
		PORTD = 0b00000000;
 11a:	1b b8       	out	0x0b, r1	; 11
		break;
 11c:	08 95       	ret
		case 9:
		PORTD = 0b00010000;
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <CLOCK_DISPLAY>:
		break;
	}
}
// Function for displaying on 4 digit - 7 segment LED
void CLOCK_DISPLAY(void) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
    digit_disp[0] = minute%10; 
 128:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 12c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 130:	2a e0       	ldi	r18, 0x0A	; 10
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodhi4>
 13a:	ea e0       	ldi	r30, 0x0A	; 10
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	91 83       	std	Z+1, r25	; 0x01
 140:	80 83       	st	Z, r24
    digit_disp[1] = minute/10;
 142:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 146:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 14a:	b9 01       	movw	r22, r18
 14c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodhi4>
 150:	73 83       	std	Z+3, r23	; 0x03
 152:	62 83       	std	Z+2, r22	; 0x02
    digit_disp[2] = hour%10; 
 154:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 158:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 15c:	b9 01       	movw	r22, r18
 15e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodhi4>
 162:	95 83       	std	Z+5, r25	; 0x05
 164:	84 83       	std	Z+4, r24	; 0x04
    digit_disp[3] = hour/10; 
 166:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 16a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 16e:	b9 01       	movw	r22, r18
 170:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divmodhi4>
 174:	77 83       	std	Z+7, r23	; 0x07
 176:	66 83       	std	Z+6, r22	; 0x06

    // for loop for displaying 4 digit.
    for (int i = 0; i<4; i++)
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	1e c0       	rjmp	.+60     	; 0x1ba <CLOCK_DISPLAY+0x96>
    {
      PORTC &= ~(15<<0); // turn off D1~D4 
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	88 b9       	out	0x08, r24	; 8
      // turn on D1 to D4 respectively to display segment on conresponding digit.
      PORTC |= (1<<i); 
 184:	28 b1       	in	r18, 0x08	; 8
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0c 2e       	mov	r0, r28
 18c:	02 c0       	rjmp	.+4      	; 0x192 <CLOCK_DISPLAY+0x6e>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <CLOCK_DISPLAY+0x6a>
 196:	82 2b       	or	r24, r18
 198:	88 b9       	out	0x08, r24	; 8
      SEGMENT_PATTERN(digit_disp[i]);
 19a:	fe 01       	movw	r30, r28
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e6 5f       	subi	r30, 0xF6	; 246
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	0e 94 6d 00 	call	0xda	; 0xda <SEGMENT_PATTERN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <CLOCK_DISPLAY+0x8c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <CLOCK_DISPLAY+0x92>
 1b6:	00 00       	nop
    digit_disp[1] = minute/10;
    digit_disp[2] = hour%10; 
    digit_disp[3] = hour/10; 

    // for loop for displaying 4 digit.
    for (int i = 0; i<4; i++)
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	c4 30       	cpi	r28, 0x04	; 4
 1bc:	d1 05       	cpc	r29, r1
 1be:	fc f2       	brlt	.-66     	; 0x17e <CLOCK_DISPLAY+0x5a>
      // turn on D1 to D4 respectively to display segment on conresponding digit.
      PORTC |= (1<<i); 
      SEGMENT_PATTERN(digit_disp[i]);
      _delay_ms(1); 
    }
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <ADDRESS_LOCATING>:
eight SCLK cycles
 */
// Access to each BYTE of the given address to write processed_data from MCU to GS1302
void ADDRESS_LOCATING(unsigned char address_location)
{
  DDRB |=(7<<0); // all SCLK, CE, IO as output.
 1c6:	94 b1       	in	r25, 0x04	; 4
 1c8:	97 60       	ori	r25, 0x07	; 7
 1ca:	94 b9       	out	0x04, r25	; 4
  for(int i = 0 ; i <= 7; i++)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	21 c0       	rjmp	.+66     	; 0x214 <ADDRESS_LOCATING+0x4e>
  {
    if (address_location & (1<<i))
 1d2:	48 2f       	mov	r20, r24
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <ADDRESS_LOCATING+0x18>
 1da:	55 95       	asr	r21
 1dc:	47 95       	ror	r20
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <ADDRESS_LOCATING+0x14>
 1e2:	40 ff       	sbrs	r20, 0
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <ADDRESS_LOCATING+0x28>
    {
      IO_ON;
 1e6:	95 b1       	in	r25, 0x05	; 5
 1e8:	92 60       	ori	r25, 0x02	; 2
 1ea:	95 b9       	out	0x05, r25	; 5
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <ADDRESS_LOCATING+0x2e>
    }
    else
    {
      IO_OFF;
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	9d 7f       	andi	r25, 0xFD	; 253
 1f2:	95 b9       	out	0x05, r25	; 5
    }
    // create SCLK cycle.
    SCLK_ON;
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	91 60       	ori	r25, 0x01	; 1
 1f8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	95 e3       	ldi	r25, 0x35	; 53
 1fc:	9a 95       	dec	r25
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <ADDRESS_LOCATING+0x36>
 200:	00 00       	nop
    _delay_us(10);
    SCLK_OFF;
 202:	95 b1       	in	r25, 0x05	; 5
 204:	9e 7f       	andi	r25, 0xFE	; 254
 206:	95 b9       	out	0x05, r25	; 5
 208:	95 e3       	ldi	r25, 0x35	; 53
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <ADDRESS_LOCATING+0x44>
 20e:	00 00       	nop
 */
// Access to each BYTE of the given address to write processed_data from MCU to GS1302
void ADDRESS_LOCATING(unsigned char address_location)
{
  DDRB |=(7<<0); // all SCLK, CE, IO as output.
  for(int i = 0 ; i <= 7; i++)
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	28 30       	cpi	r18, 0x08	; 8
 216:	31 05       	cpc	r19, r1
 218:	e4 f2       	brlt	.-72     	; 0x1d2 <ADDRESS_LOCATING+0xc>
    SCLK_ON;
    _delay_us(10);
    SCLK_OFF;
    _delay_us(10);
  }
}
 21a:	08 95       	ret

0000021c <DS1302_WRITE>:
 * As we write value from MCU to clock keeper. PORTB0~B2 need to be ouput for 
write data into desired address.
 */
// Write to the given address
void DS1302_WRITE(unsigned char address_location, unsigned char processed_data)
{
 21c:	cf 93       	push	r28
 21e:	c6 2f       	mov	r28, r22
  CE_ON;
 220:	95 b1       	in	r25, 0x05	; 5
 222:	94 60       	ori	r25, 0x04	; 4
 224:	95 b9       	out	0x05, r25	; 5
  ADDRESS_LOCATING(address_location);
 226:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ADDRESS_LOCATING>
  DDRB |= (7<<0); // CLK, DATA, RST as output.
 22a:	84 b1       	in	r24, 0x04	; 4
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	84 b9       	out	0x04, r24	; 4
  // Using for loop to access to each byte.
  for(int i = 0; i <= 7; i++)
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	20 c0       	rjmp	.+64     	; 0x276 <DS1302_WRITE+0x5a>
  {
    if (processed_data & (1<<i))
 236:	2c 2f       	mov	r18, r28
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	08 2e       	mov	r0, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DS1302_WRITE+0x26>
 23e:	35 95       	asr	r19
 240:	27 95       	ror	r18
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <DS1302_WRITE+0x22>
 246:	20 ff       	sbrs	r18, 0
 248:	04 c0       	rjmp	.+8      	; 0x252 <DS1302_WRITE+0x36>
    {
      IO_ON;
 24a:	25 b1       	in	r18, 0x05	; 5
 24c:	22 60       	ori	r18, 0x02	; 2
 24e:	25 b9       	out	0x05, r18	; 5
 250:	03 c0       	rjmp	.+6      	; 0x258 <DS1302_WRITE+0x3c>
    }
    else
    {
      IO_OFF;
 252:	25 b1       	in	r18, 0x05	; 5
 254:	2d 7f       	andi	r18, 0xFD	; 253
 256:	25 b9       	out	0x05, r18	; 5
    }
    SCLK_ON;
 258:	25 b1       	in	r18, 0x05	; 5
 25a:	21 60       	ori	r18, 0x01	; 1
 25c:	25 b9       	out	0x05, r18	; 5
 25e:	25 e3       	ldi	r18, 0x35	; 53
 260:	2a 95       	dec	r18
 262:	f1 f7       	brne	.-4      	; 0x260 <DS1302_WRITE+0x44>
 264:	00 00       	nop
    _delay_us(10);
    SCLK_OFF;
 266:	25 b1       	in	r18, 0x05	; 5
 268:	2e 7f       	andi	r18, 0xFE	; 254
 26a:	25 b9       	out	0x05, r18	; 5
 26c:	25 e3       	ldi	r18, 0x35	; 53
 26e:	2a 95       	dec	r18
 270:	f1 f7       	brne	.-4      	; 0x26e <DS1302_WRITE+0x52>
 272:	00 00       	nop
{
  CE_ON;
  ADDRESS_LOCATING(address_location);
  DDRB |= (7<<0); // CLK, DATA, RST as output.
  // Using for loop to access to each byte.
  for(int i = 0; i <= 7; i++)
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	88 30       	cpi	r24, 0x08	; 8
 278:	91 05       	cpc	r25, r1
 27a:	ec f2       	brlt	.-70     	; 0x236 <DS1302_WRITE+0x1a>
    SCLK_ON;
    _delay_us(10);
    SCLK_OFF;
    _delay_us(10);
  }
  CE_OFF;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	85 b9       	out	0x05, r24	; 5
}
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <DS1302_READ>:
// To read data, IO has to be re-configured to be input. 
// Read data in each addresses
unsigned char DS1302_READ(unsigned char address_location)
{
  unsigned char processed_data = 0;
  CE_ON;
 286:	95 b1       	in	r25, 0x05	; 5
 288:	94 60       	ori	r25, 0x04	; 4
 28a:	95 b9       	out	0x05, r25	; 5
  ADDRESS_LOCATING(address_location);
 28c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ADDRESS_LOCATING>
  DDRB &= ~(1<<1); // IO as input to receive data from RTC. 
 290:	84 b1       	in	r24, 0x04	; 4
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	84 b9       	out	0x04, r24	; 4
  for(int i = 0; i <= 7; i++)
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0

// To read data, IO has to be re-configured to be input. 
// Read data in each addresses
unsigned char DS1302_READ(unsigned char address_location)
{
  unsigned char processed_data = 0;
 29a:	80 e0       	ldi	r24, 0x00	; 0
  CE_ON;
  ADDRESS_LOCATING(address_location);
  DDRB &= ~(1<<1); // IO as input to receive data from RTC. 
  for(int i = 0; i <= 7; i++)
 29c:	1b c0       	rjmp	.+54     	; 0x2d4 <DS1302_READ+0x4e>
  {
    if ((PINB & (1 << PINB1)) != 0) 
 29e:	19 9b       	sbis	0x03, 1	; 3
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <DS1302_READ+0x2e>
    {
      processed_data |= processed_data|(1<<i);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	02 2e       	mov	r0, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DS1302_READ+0x28>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DS1302_READ+0x24>
 2b2:	84 2b       	or	r24, r20
    }
    SCLK_ON;
 2b4:	95 b1       	in	r25, 0x05	; 5
 2b6:	91 60       	ori	r25, 0x01	; 1
 2b8:	95 b9       	out	0x05, r25	; 5
 2ba:	95 e3       	ldi	r25, 0x35	; 53
 2bc:	9a 95       	dec	r25
 2be:	f1 f7       	brne	.-4      	; 0x2bc <DS1302_READ+0x36>
 2c0:	00 00       	nop
    _delay_us(10);
    SCLK_OFF;
 2c2:	95 b1       	in	r25, 0x05	; 5
 2c4:	9e 7f       	andi	r25, 0xFE	; 254
 2c6:	95 b9       	out	0x05, r25	; 5
 2c8:	95 e3       	ldi	r25, 0x35	; 53
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <DS1302_READ+0x44>
 2ce:	00 00       	nop
{
  unsigned char processed_data = 0;
  CE_ON;
  ADDRESS_LOCATING(address_location);
  DDRB &= ~(1<<1); // IO as input to receive data from RTC. 
  for(int i = 0; i <= 7; i++)
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	28 30       	cpi	r18, 0x08	; 8
 2d6:	31 05       	cpc	r19, r1
 2d8:	14 f3       	brlt	.-60     	; 0x29e <DS1302_READ+0x18>
    SCLK_ON;
    _delay_us(10);
    SCLK_OFF;
    _delay_us(10);
  }
  DDRB |= (1<<1); // IO back to output after finishing reading.
 2da:	94 b1       	in	r25, 0x04	; 4
 2dc:	92 60       	ori	r25, 0x02	; 2
 2de:	94 b9       	out	0x04, r25	; 4
  CE_OFF;
 2e0:	95 b1       	in	r25, 0x05	; 5
 2e2:	9b 7f       	andi	r25, 0xFB	; 251
 2e4:	95 b9       	out	0x05, r25	; 5
  return(processed_data);
}
 2e6:	08 95       	ret

000002e8 <DEC_2_BCD>:

// convert decimal to binary coded decimal Number to write to address in RTC. 
unsigned int DEC_2_BCD(unsigned int decimal)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	fc 01       	movw	r30, r24
  decimal = (decimal/10)*16 + (decimal%10);
 2ee:	9c 01       	movw	r18, r24
 2f0:	ad ec       	ldi	r26, 0xCD	; 205
 2f2:	bc ec       	ldi	r27, 0xCC	; 204
 2f4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__umulhisi3>
 2f8:	ac 01       	movw	r20, r24
 2fa:	56 95       	lsr	r21
 2fc:	47 95       	ror	r20
 2fe:	56 95       	lsr	r21
 300:	47 95       	ror	r20
 302:	56 95       	lsr	r21
 304:	47 95       	ror	r20
 306:	ea 01       	movw	r28, r20
 308:	c2 95       	swap	r28
 30a:	d2 95       	swap	r29
 30c:	d0 7f       	andi	r29, 0xF0	; 240
 30e:	dc 27       	eor	r29, r28
 310:	c0 7f       	andi	r28, 0xF0	; 240
 312:	dc 27       	eor	r29, r28
 314:	ca 01       	movw	r24, r20
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	44 0f       	add	r20, r20
 320:	55 1f       	adc	r21, r21
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	48 0f       	add	r20, r24
 328:	59 1f       	adc	r21, r25
 32a:	cf 01       	movw	r24, r30
 32c:	84 1b       	sub	r24, r20
 32e:	95 0b       	sbc	r25, r21
  return (decimal);
}
 330:	8c 0f       	add	r24, r28
 332:	9d 1f       	adc	r25, r29
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <BCD_2_DEC>:
// convert binary coded decimal Number decimal to read processed_data from in RTC.
unsigned int BCD_2_DEC(unsigned char processed_data)
{
  processed_data = (processed_data/16)*10 + (processed_data%16);
 33a:	98 2f       	mov	r25, r24
 33c:	92 95       	swap	r25
 33e:	9f 70       	andi	r25, 0x0F	; 15
 340:	99 0f       	add	r25, r25
 342:	29 2f       	mov	r18, r25
 344:	22 0f       	add	r18, r18
 346:	22 0f       	add	r18, r18
 348:	92 0f       	add	r25, r18
 34a:	8f 70       	andi	r24, 0x0F	; 15
 34c:	89 0f       	add	r24, r25
  return (processed_data);
}
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

00000352 <RTC_TIME_SET>:

void RTC_TIME_SET()
{
  DS1302_WRITE(second_W,DEC_2_BCD(second));
 352:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <second>
 356:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <second+0x1>
 35a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DEC_2_BCD>
 35e:	68 2f       	mov	r22, r24
 360:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <second_W>
 364:	0e 94 0e 01 	call	0x21c	; 0x21c <DS1302_WRITE>
  DS1302_WRITE(minute_W,DEC_2_BCD(minute));
 368:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 36c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 370:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DEC_2_BCD>
 374:	68 2f       	mov	r22, r24
 376:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <minute_W>
 37a:	0e 94 0e 01 	call	0x21c	; 0x21c <DS1302_WRITE>
  DS1302_WRITE(hour_W,DEC_2_BCD(hour));
 37e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 382:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 386:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DEC_2_BCD>
 38a:	68 2f       	mov	r22, r24
 38c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hour_W>
 390:	0e 94 0e 01 	call	0x21c	; 0x21c <DS1302_WRITE>
 394:	08 95       	ret

00000396 <RTC_TIME_GET>:
}

void RTC_TIME_GET()
{
  minute = BCD_2_DEC(DS1302_READ(minute_R));
 396:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minute_R>
 39a:	0e 94 43 01 	call	0x286	; 0x286 <DS1302_READ>
 39e:	0e 94 9d 01 	call	0x33a	; 0x33a <BCD_2_DEC>
 3a2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <minute+0x1>
 3a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <minute>
  hour = BCD_2_DEC(DS1302_READ(hour_R));
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ae:	0e 94 43 01 	call	0x286	; 0x286 <DS1302_READ>
 3b2:	0e 94 9d 01 	call	0x33a	; 0x33a <BCD_2_DEC>
 3b6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <hour+0x1>
 3ba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour>
 3be:	08 95       	ret

000003c0 <main>:
}
// Main program
int main(void)
{
  clk_state = idle; // clock initial state
 3c0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <clk_state>
  SYSTEM_CONFIGURATION();
 3c4:	0e 94 5d 00 	call	0xba	; 0xba <SYSTEM_CONFIGURATION>
  while(1)
  {
    switch(clk_state)
 3c8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <clk_state>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	e1 f0       	breq	.+56     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3d0:	38 f0       	brcs	.+14     	; 0x3e0 <main+0x20>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <main+0x18>
 3d6:	76 c0       	rjmp	.+236    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	09 f4       	brne	.+2      	; 0x3de <main+0x1e>
 3dc:	d1 c0       	rjmp	.+418    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 3de:	f4 cf       	rjmp	.-24     	; 0x3c8 <main+0x8>
    {
      case idle:
        LED_1_OFF;
 3e0:	88 b1       	in	r24, 0x08	; 8
 3e2:	8f 7e       	andi	r24, 0xEF	; 239
 3e4:	88 b9       	out	0x08, r24	; 8
        LED_2_OFF;
 3e6:	88 b1       	in	r24, 0x08	; 8
 3e8:	8f 7d       	andi	r24, 0xDF	; 223
 3ea:	88 b9       	out	0x08, r24	; 8
        if (BUTTON_2_PRESSED) // if button 2 is pressed
 3ec:	1b 99       	sbic	0x03, 3	; 3
 3ee:	0c c0       	rjmp	.+24     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	82 e5       	ldi	r24, 0x52	; 82
 3f4:	97 e0       	ldi	r25, 0x07	; 7
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x36>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
        {
          _delay_ms(150);// delay 150ms for debouncing the button
          clk_state = set_hours;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
        }
      case set_hours:
        LED_1_ON;
 408:	88 b1       	in	r24, 0x08	; 8
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	88 b9       	out	0x08, r24	; 8
        LED_2_OFF;
 40e:	88 b1       	in	r24, 0x08	; 8
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	88 b9       	out	0x08, r24	; 8
        RTC_TIME_GET();
 414:	0e 94 cb 01 	call	0x396	; 0x396 <RTC_TIME_GET>
        if (BUTTON_1_PRESSED) // if button 1 is pressed
 418:	4f 99       	sbic	0x09, 7	; 9
 41a:	0c c0       	rjmp	.+24     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	82 e5       	ldi	r24, 0x52	; 82
 420:	97 e0       	ldi	r25, 0x07	; 7
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
        {
          _delay_ms(150);// delay 150ms for debouncing the button
          clk_state = time_mode;
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
        }
        if (BUTTON_2_PRESSED) // if button 2 is pressed
 434:	1b 99       	sbic	0x03, 3	; 3
 436:	0c c0       	rjmp	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	82 e5       	ldi	r24, 0x52	; 82
 43c:	97 e0       	ldi	r25, 0x07	; 7
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
        {
          _delay_ms(150);// delay 150ms for debouncing the button
          clk_state = set_minutes;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
        }
        if ((BUTTON_3_PRESSED)&& (hour < 23)) // if button 3 is pressed. Increase
 450:	1c 99       	sbic	0x03, 4	; 3
 452:	18 c0       	rjmp	.+48     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 454:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 458:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 45c:	47 97       	sbiw	r24, 0x17	; 23
 45e:	94 f4       	brge	.+36     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
        {
          hour++;
 460:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 464:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <hour+0x1>
 46e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	82 e5       	ldi	r24, 0x52	; 82
 476:	97 e0       	ldi	r25, 0x07	; 7
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
          _delay_ms(150);// delay 150ms for de-bouncing the button
        }
        if ((BUTTON_4_PRESSED)&& (hour > 0)) // if button 4 is pressed. Decrease
 484:	1d 99       	sbic	0x03, 5	; 3
 486:	19 c0       	rjmp	.+50     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 488:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 48c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 490:	18 16       	cp	r1, r24
 492:	19 06       	cpc	r1, r25
 494:	94 f4       	brge	.+36     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
        {
          hour--;
 496:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <hour>
 49a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <hour+0x1>
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <hour+0x1>
 4a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <hour>
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	82 e5       	ldi	r24, 0x52	; 82
 4ac:	97 e0       	ldi	r25, 0x07	; 7
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
          _delay_ms(150);// delay 150ms for de-bouncing the button
        }
         RTC_TIME_SET();
 4ba:	0e 94 a9 01 	call	0x352	; 0x352 <RTC_TIME_SET>
         CLOCK_DISPLAY(); // Display on 4digit-7seg LED.
 4be:	0e 94 92 00 	call	0x124	; 0x124 <CLOCK_DISPLAY>
      break;
 4c2:	82 cf       	rjmp	.-252    	; 0x3c8 <main+0x8>
      case set_minutes:
        LED_1_ON;
 4c4:	88 b1       	in	r24, 0x08	; 8
 4c6:	80 61       	ori	r24, 0x10	; 16
 4c8:	88 b9       	out	0x08, r24	; 8
        LED_2_OFF;
 4ca:	88 b1       	in	r24, 0x08	; 8
 4cc:	8f 7d       	andi	r24, 0xDF	; 223
 4ce:	88 b9       	out	0x08, r24	; 8
        RTC_TIME_GET();
 4d0:	0e 94 cb 01 	call	0x396	; 0x396 <RTC_TIME_GET>
        if (BUTTON_1_PRESSED)// if button 1 is pressed
 4d4:	4f 99       	sbic	0x09, 7	; 9
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	82 e5       	ldi	r24, 0x52	; 82
 4dc:	97 e0       	ldi	r25, 0x07	; 7
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
		{
			_delay_ms(150); // delay 150ms for de-bouncing the button
			clk_state = time_mode;
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
		}
        if (BUTTON_2_PRESSED) // if button 2 is pressed
 4f0:	1b 99       	sbic	0x03, 3	; 3
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	82 e5       	ldi	r24, 0x52	; 82
 4f8:	97 e0       	ldi	r25, 0x07	; 7
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 504:	00 00       	nop
        {
          _delay_ms(150);// delay 150ms for de-bouncing the button
          clk_state = set_hours;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
        }
        if ((BUTTON_3_PRESSED)&&(minute <59)) // if button 3 is pressed. Increase
 50c:	1c 99       	sbic	0x03, 4	; 3
 50e:	18 c0       	rjmp	.+48     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 510:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 514:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 518:	cb 97       	sbiw	r24, 0x3b	; 59
 51a:	94 f4       	brge	.+36     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
        {
          minute++;
 51c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 520:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <minute+0x1>
 52a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <minute>
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	82 e5       	ldi	r24, 0x52	; 82
 532:	97 e0       	ldi	r25, 0x07	; 7
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53e:	00 00       	nop
          _delay_ms(150);// delay 150ms for debouncing the button
        }
        if ((BUTTON_4_PRESSED)&&(minute > 0)) // if button 4 is pressed. Decrease
 540:	1d 99       	sbic	0x03, 5	; 3
 542:	19 c0       	rjmp	.+50     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
 544:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 548:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 54c:	18 16       	cp	r1, r24
 54e:	19 06       	cpc	r1, r25
 550:	94 f4       	brge	.+36     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
        {
          
          minute--;
 552:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minute>
 556:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <minute+0x1>
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <minute+0x1>
 560:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <minute>
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	82 e5       	ldi	r24, 0x52	; 82
 568:	97 e0       	ldi	r25, 0x07	; 7
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 574:	00 00       	nop
          _delay_ms(150);// delay 150ms for debouncing the button
        }
         RTC_TIME_SET();
 576:	0e 94 a9 01 	call	0x352	; 0x352 <RTC_TIME_SET>
         CLOCK_DISPLAY(); // Display on 4digit-7seg LED.
 57a:	0e 94 92 00 	call	0x124	; 0x124 <CLOCK_DISPLAY>
      break;
 57e:	24 cf       	rjmp	.-440    	; 0x3c8 <main+0x8>
      case time_mode:
        LED_1_OFF;
 580:	88 b1       	in	r24, 0x08	; 8
 582:	8f 7e       	andi	r24, 0xEF	; 239
 584:	88 b9       	out	0x08, r24	; 8
        LED_2_ON;
 586:	88 b1       	in	r24, 0x08	; 8
 588:	80 62       	ori	r24, 0x20	; 32
 58a:	88 b9       	out	0x08, r24	; 8
        if (BUTTON_2_PRESSED) // if button 2 is pressed. Back to set mode.
 58c:	1b 99       	sbic	0x03, 3	; 3
 58e:	0c c0       	rjmp	.+24     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 590:	2f ef       	ldi	r18, 0xFF	; 255
 592:	82 e5       	ldi	r24, 0x52	; 82
 594:	97 e0       	ldi	r25, 0x07	; 7
 596:	21 50       	subi	r18, 0x01	; 1
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	90 40       	sbci	r25, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
        {
          _delay_ms(150);
          clk_state = set_hours;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <clk_state>
        }
        RTC_TIME_GET();
 5a8:	0e 94 cb 01 	call	0x396	; 0x396 <RTC_TIME_GET>
        // display time.
        CLOCK_DISPLAY(); // Display on 4digit-7seg LED.
 5ac:	0e 94 92 00 	call	0x124	; 0x124 <CLOCK_DISPLAY>
      break;
 5b0:	0b cf       	rjmp	.-490    	; 0x3c8 <main+0x8>

000005b2 <__divmodhi4>:
 5b2:	97 fb       	bst	r25, 7
 5b4:	07 2e       	mov	r0, r23
 5b6:	16 f4       	brtc	.+4      	; 0x5bc <__divmodhi4+0xa>
 5b8:	00 94       	com	r0
 5ba:	07 d0       	rcall	.+14     	; 0x5ca <__divmodhi4_neg1>
 5bc:	77 fd       	sbrc	r23, 7
 5be:	09 d0       	rcall	.+18     	; 0x5d2 <__divmodhi4_neg2>
 5c0:	0e 94 02 03 	call	0x604	; 0x604 <__udivmodhi4>
 5c4:	07 fc       	sbrc	r0, 7
 5c6:	05 d0       	rcall	.+10     	; 0x5d2 <__divmodhi4_neg2>
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__divmodhi4_exit>

000005ca <__divmodhi4_neg1>:
 5ca:	90 95       	com	r25
 5cc:	81 95       	neg	r24
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__divmodhi4_neg2>:
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255

000005d8 <__divmodhi4_exit>:
 5d8:	08 95       	ret

000005da <__tablejump2__>:
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	05 90       	lpm	r0, Z+
 5e0:	f4 91       	lpm	r31, Z
 5e2:	e0 2d       	mov	r30, r0
 5e4:	09 94       	ijmp

000005e6 <__umulhisi3>:
 5e6:	a2 9f       	mul	r26, r18
 5e8:	b0 01       	movw	r22, r0
 5ea:	b3 9f       	mul	r27, r19
 5ec:	c0 01       	movw	r24, r0
 5ee:	a3 9f       	mul	r26, r19
 5f0:	70 0d       	add	r23, r0
 5f2:	81 1d       	adc	r24, r1
 5f4:	11 24       	eor	r1, r1
 5f6:	91 1d       	adc	r25, r1
 5f8:	b2 9f       	mul	r27, r18
 5fa:	70 0d       	add	r23, r0
 5fc:	81 1d       	adc	r24, r1
 5fe:	11 24       	eor	r1, r1
 600:	91 1d       	adc	r25, r1
 602:	08 95       	ret

00000604 <__udivmodhi4>:
 604:	aa 1b       	sub	r26, r26
 606:	bb 1b       	sub	r27, r27
 608:	51 e1       	ldi	r21, 0x11	; 17
 60a:	07 c0       	rjmp	.+14     	; 0x61a <__udivmodhi4_ep>

0000060c <__udivmodhi4_loop>:
 60c:	aa 1f       	adc	r26, r26
 60e:	bb 1f       	adc	r27, r27
 610:	a6 17       	cp	r26, r22
 612:	b7 07       	cpc	r27, r23
 614:	10 f0       	brcs	.+4      	; 0x61a <__udivmodhi4_ep>
 616:	a6 1b       	sub	r26, r22
 618:	b7 0b       	sbc	r27, r23

0000061a <__udivmodhi4_ep>:
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	5a 95       	dec	r21
 620:	a9 f7       	brne	.-22     	; 0x60c <__udivmodhi4_loop>
 622:	80 95       	com	r24
 624:	90 95       	com	r25
 626:	bc 01       	movw	r22, r24
 628:	cd 01       	movw	r24, r26
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
